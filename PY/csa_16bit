from tqdm import tqdm
from multiprocessing import Pool, cpu_count

def full_adder(a, b, cin):
    s = (a ^ b) ^ cin
    cout = (a & b) | (b & cin) | (cin & a)
    return s, cout

def ripple_adder_nbit_list(a, b, cin, n):
    sum_bits = []
    carry = cin
    for i in range(n):
        ai = (a >> i) & 1
        bi = (b >> i) & 1
        s, carry = full_adder(ai, bi, carry)
        sum_bits.append(s)
    return sum_bits, carry

def mux2to1(d0, d1, sel):
    return d1 if sel else d0

def mux_bitlist2to1(list0, list1, sel):
    return [mux2to1(d0, d1, sel) for d0, d1 in zip(list0, list1)]

def csa_block(a, b, prev_carry, n):
    """
    Carry Select Block
    - a, b: n-bit 정수
    - prev_carry: MUX 선택 기준
    - n: 비트 수 (2, 3, 4, 5 등)
    """
    sum0, carry0 = ripple_adder_nbit_list(a, b, 0, n)
    sum1, carry1 = ripple_adder_nbit_list(a, b, 1, n)
    selected_sum = mux_bitlist2to1(sum0, sum1, prev_carry)
    selected_carry = mux2to1(carry0, carry1, prev_carry)
    return selected_sum, selected_carry


def carry_select_adder_16bit_2_2_3_4_5(a, b, cin):
    sum_total = []
    carry = cin
    bit_index = 0

    def get_bits(val, start, n):
        return (val >> start) & ((1 << n) - 1)

    # Group 1: RCA 2-bit
    a1 = get_bits(a, 0, 2)
    b1 = get_bits(b, 0, 2)
    sum1, carry = ripple_adder_nbit_list(a1, b1, carry, 2)
    sum_total.extend(sum1)
    bit_index += 2

    # Group 2: CSA 2-bit
    a2 = get_bits(a, bit_index, 2)
    b2 = get_bits(b, bit_index, 2)
    sum2, carry = csa_block(a2, b2, carry, 2)
    sum_total.extend(sum2)
    bit_index += 2

    # Group 3: CSA 3-bit
    a3 = get_bits(a, bit_index, 3)
    b3 = get_bits(b, bit_index, 3)
    sum3, carry = csa_block(a3, b3, carry, 3)
    sum_total.extend(sum3)
    bit_index += 3

    # Group 4: CSA 4-bit
    a4 = get_bits(a, bit_index, 4)
    b4 = get_bits(b, bit_index, 4)
    sum4, carry = csa_block(a4, b4, carry, 4)
    sum_total.extend(sum4)
    bit_index += 4

    # Group 5: CSA 5-bit
    a5 = get_bits(a, bit_index, 5)
    b5 = get_bits(b, bit_index, 5)
    sum5, carry = csa_block(a5, b5, carry, 5)
    sum_total.extend(sum5)
    bit_index += 5

    return sum_total, carry

def validate_csa_exhaustive_tqdm():
    error_count = 0
    total = 1 << 33  # 총 루프 수: 2^33 = 8.5B
    checked = 0

    for a in tqdm(range(0x10000), desc="A-loop (16bit)", unit="a"):
        for b in range(0x10000):
            for cin in (0, 1):
                sum_bits, cout = carry_select_adder_16bit_2_2_3_4_5(a, b, cin)
                sum_csa = sum([bit << i for i, bit in enumerate(sum_bits)])

                expected = a + b + cin
                expected_sum = expected & 0xFFFF
                expected_cout = (expected >> 16) & 1

                if sum_csa != expected_sum or cout != expected_cout:
                    error_count += 1

                checked += 1

    print("\n=== 검사 완료 ===")
    print(f"총 검사 건수: {checked}")
    print(f"총 오류 수: {error_count}")
    print(f"정확도: {(1 - error_count / checked) * 100:.10f}%")


if __name__ == "__main__":
    validate_csa_exhaustive_tqdm()
